<% layout('layouts/admin') %>

<div class="container-fluid">
    <div class="row bg-title">
        <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">
            <h4 class="page-title"><%= LANG.Dashboard %></h4>
        </div>
        <div class="col-lg-9 col-sm-8 col-md-8 col-xs-12">
            <ol class="breadcrumb">
                <li><a href="/dashboard"><%= LANG.Dashboard %></a></li>
            </ol>
        </div>
        <!-- /.col-lg-12 -->
    </div>

    <div class="row">
        <div class="col-sm-12">
            <div class="white-box">
                <h3 class="box-title m-b-0"><%= LANG.YourProfie %></h3>
                <p class="text-muted m-b-30"> </p>
                <form data-toggle="validator" action="/changeProfieInfo" method="POST" encType="multipart/form-data">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputName1" class="control-label"><%= LANG.FirstName %> <sup> * </sup></label>
                                <input type="text" onkeypress="return isChar(event)" class="form-control" name="fname" id="inputName1" placeholder="<%= LANG.FirstName %>"
                                    value="<%= userinfo.fname %>" required>
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputName1" class="control-label"><%= LANG.LastName %> <sup> * </sup></label>
                                <input type="text" onkeypress="return isChar(event)" class="form-control" name="lname" id="inputName2" placeholder="<%= LANG.LastName %>"
                                    value="<%= userinfo.lname %>" required>
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="inputEmail" class="control-label">Email</label>
                                <input type="email" class="form-control" id="inputEmail" value="<%= userinfo.email %>"
                                    placeholder="Email" data-error="<%= LANG.oopsEmail %>" readonly>
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="inputPassword" class="control-label"><%= LANG.NewPassword %></label>
                        <div class="row">
                            <div class="form-group col-sm-6">
                                <input type="password" name="npass" data-toggle="validator" data-minlength="6" class="form-control"
                                    id="inputPassword" placeholder="<%= LANG.NewPassword %>" autocomplete="false">
                                <span class="help-block"><%= LANG.MinimumSix %></span>
                            </div>
                            <div class="form-group col-sm-6">
                                <input type="password" name="cnpass" class="form-control" id="inputPasswordConfirm"
                                    data-match="#inputPassword" data-match-error=" <%= LANG.oopsPassword %>"
                                    placeholder="<%= LANG.Confirm %> <%= LANG.NewPassword %> ">
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="locationName" class="control-label"><%= LANG.Location %></label>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="requiredinput-group">
                                    <input type="text" value="<%= userinfo.location %>" placeholder="<%= LANG.Location %>" id="locationName" class="form-control model_img img-responsive"
                                        required name="location" onkeydown="return false;" data-toggle="modal" data-target=".bs-example-modal-lg">
                                    <input type="hidden" value="<%= userinfo.latitude %>" name="latitude" id="lat" />
                                    <input type="hidden" value="<%= userinfo.longitude %>" name="longitude" id="long" />
                                </div>
                                <div class="help-block with-errors"></div>
                            </div>
                            <div class="col-sm-6">
                                <div class="requiredinput-group">
                                    <input type="text" value="<%= userinfo.nif_number %>" placeholder="<%= LANG.Location %>" id="" class="form-control model_img img-responsive" required name="nif_number" readonly>
                                </div>
                                <div class="help-block with-errors"></div>
                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label for="exampleInputFile"><%= LANG.ProfileImage %></label>
                        <div class="imageUpload"  title="<%= LANG.SelectImage %> ">
                            <input id="exampleInputFile" type="file" name="profileImg" onchange="readURL(this);">
                        <%= LANG.SelectImage %> </div>
                        <p class="help-block">(<%= LANG.ImageMax %> 150KB)</p>
                        <div class="">
                            <% if(userinfo.user_image !='' ){ %>
                            <img src="/uploads/business/<%= userinfo.user_image %>" id="ProfileImg" width="150" alt="User Image">
                            <% } else{ %>
                            <img id="ProfileImg" src="" width="150">
                            <% } %>
                        </div>
                    </div>
                     <div class="modal fade bs-example-modal-lg" id="mapId" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" style="display: none;">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title" id="myLargeModalLabel"><%= LANG.SelectYourLocation %></h4>
                                    <button type="button" class="close" data-dismiss="modal"  aria-hidden="true">X</button>
                                </div>
                                <div class="modal-body">
                                    <input id="pac-input" class="controls" autocomplete="false" type="text" placeholder="<%= LANG.SearchAddress %>">
                                    <div id="map-canvas"></div>
                                    <div class="map-btn"><i class="fas fa-map-marker-alt"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group text-right">
                        <button type="submit" class="btn btn-primary"><%= LANG.Submit %></button>
                        <a href="/dashboard" class="btn btn-primary waves-effect"><%= LANG.Back %></a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<style>
    #map-canvas {
        height: 470px;
        width: 100%;
        margin: 0px;
        padding: 0px
    }
    #pac-input {
    font-family: Roboto;
    font-size: 15px;
    padding: 10px;
    text-overflow: ellipsis;
    width: 50%;
  }
  .pac-container { z-index: 10000 !important; }

  #pac-input:focus {
    border-color: #4d90fe;
  }
</style>
<script src="js/validator.js"></script>
<script>

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#ProfileImg').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    $('#locationName').focus(function () {
        //open bootsrap modal
        $('#mapId').modal({
            show: true
        });
    });
    $(function () {
        $('input').change(function () {
            this.value = $.trim(this.value);
        });
    });

</script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBRI7fCkh8bbfFp6Hi_oQ5dTPXC4gmMhIE&libraries=visualization&callback=initMap&libraries=places"></script>

    <script>
            function isChar(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        // alert(charCode)
        if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || (charCode == 32))
            return true;
        return false;
    }
        function readURL(input) {
			if (input.files && input.files[0]) {
				var reader = new FileReader();
				reader.onload = function (e) {
					$('#catImg').attr('src', e.target.result);
				}
				reader.readAsDataURL(input.files[0]);
			}
        }


    $(function(){
        $(".map-btn").click(function(){
            var tryAPIGeolocation = function() {
                jQuery.post( "https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyC6Gr1MBiQ0hc2152v9NYFaQdraXPwBc1w", function(success) {
                    apiGeolocationSuccess({coords: {latitude: success.location.lat, longitude: success.location.lng}});
                }).fail(function(err) {
                    console.log(err);
                    alert("API Geolocation error! \n\n"+err);
                });
            };

            var browserGeolocationSuccess = function(position) {
                alert("Browser geolocation success!\n\nlat = " + position.coords.latitude + "\nlng = " + position.coords.longitude);
            };

            var browserGeolocationFail = function(error) {
                switch (error.code) {
                    case error.TIMEOUT:
                        alert("Browser geolocation error !\n\nTimeout.");
                        break;
                    case error.PERMISSION_DENIED:
                    if(error.message.indexOf("Only secure origins are allowed") == 0) {
                        tryAPIGeolocation();
                    }
                    break;
                    case error.POSITION_UNAVAILABLE:
                        alert("Browser geolocation error !\n\nPosition unavailable.");
                        break;
                }
            };

            var tryGeolocation = function() {
                if(navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        browserGeolocationSuccess,
                    browserGeolocationFail,
                    {maximumAge: 50000, timeout: 20000, enableHighAccuracy: true});
                }
            };

            tryGeolocation();


        var apiGeolocationSuccess = function(position) {
                var myLatlng = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);

                var myOptions = {
                    zoom: 8,
                    center: myLatlng
                }
                var map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);


                var geocoder = new google.maps.Geocoder();

                var marker;
                marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            draggable: false
                        });
                function placeMarker(location) {
                    if (marker) {
                        marker.setPosition(location);
                    } else {
                        marker = new google.maps.Marker({
                            position: location,
                            map: map,
                            draggable: false
                        });
                    }
                }

                google.maps.event.addListener(map, 'click', function (event) {
                    placeMarker(event.latLng);
                    var lat = parseFloat(event.latLng.lat());
                    var lng = parseFloat(event.latLng.lng());
                    document.getElementById("lat").value = lat;
                    document.getElementById("long").value = lng;
                    geocoder.geocode({
                        'latLng': event.latLng
                    }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                var str = results[0].formatted_address;
                                res = str.replace("Unnamed Road", "Township");
                                document.getElementById("inputName2").value = res;
                            }
                        }
                    });
                });

                var input = (document.getElementById('pac-input'));
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                var searchBox = new google.maps.places.SearchBox((input));

                google.maps.event.addListener(searchBox, 'places_changed', function () {
                    var places = searchBox.getPlaces();
                    if (places.length == 0) {
                        return;
                    }

                    markers = [];
                    for (var i = 0, marker; marker = markers[i]; i++) {
                        marker.setMap(null);
                    }
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0, place; place = places[i]; i++) {
                        var image = {
                            url: '/images/marker.png',
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(50, 50)
                        };
                        // Create a marker for each place.
                        var marker = new google.maps.Marker({
                            map: map,
                            icon: image,
                            title: place.name,
                            position: place.geometry.location
                        });

                        markers.push(marker);

                        bounds.extend(place.geometry.location);

                        var latitude = place.geometry.location.lat();
                        var longitude = place.geometry.location.lng();

                        document.getElementById("lat").value = latitude;
                        document.getElementById("long").value = longitude;
                        document.getElementById("inputName2").value = place.formatted_address;

                    }
                    map.fitBounds(bounds);
                    map.setZoom(Math.min(map.getZoom(), 15));
                });

                google.maps.event.addListener(map, 'bounds_changed', function () {
                    var bounds = map.getBounds();
                    searchBox.setBounds(bounds);
                });
            }
        });
    });



        if(<%= userinfo.latitude %>){
			var myLatlng = new google.maps.LatLng(<%= userinfo.latitude %>, <%= userinfo.longitude %>);
		}else{
			var myLatlng = new google.maps.LatLng(-12.046373, -77.042755);
		}


        var myOptions = {
            zoom: 14,
            center: myLatlng
        }
        var map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
        var geocoder = new google.maps.Geocoder();

        var marker;
        marker = new google.maps.Marker({
                position: myLatlng,
                map: map,
                draggable: false
            });
        function placeMarker(location) {
            if (marker) {
                marker.setPosition(location);
            } else {
                marker = new google.maps.Marker({
                    position: location,
                    map: map,
                    draggable: false
                });
            }
        }
        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
            var lat = parseFloat(event.latLng.lat());
            var lng = parseFloat(event.latLng.lng());
            document.getElementById("lat").value = lat;
            document.getElementById("long").value = lng;
            geocoder.geocode({
                'latLng': event.latLng
            }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        var str = results[0].formatted_address;
                        res = str.replace("Unnamed Road", "Township");
                        document.getElementById("locationName").value = res;
                    }
                }
            });
        });

        var input = (document.getElementById('pac-input'));
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        var searchBox = new google.maps.places.SearchBox((input));

        google.maps.event.addListener(searchBox, 'places_changed', function () {
            var places = searchBox.getPlaces();
            if (places.length == 0) {
                return;
            }

            markers = [];
            for (var i = 0, marker; marker = markers[i]; i++) {
                marker.setMap(null);
            }
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: '/images/marker.png',
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(50, 50)
                };
                // Create a marker for each place.
                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location
                });

                markers.push(marker);

                bounds.extend(place.geometry.location);

                var latitude = place.geometry.location.lat();
                var longitude = place.geometry.location.lng();

                document.getElementById("lat").value = latitude;
                document.getElementById("long").value = longitude;
                document.getElementById("locationName").value = place.formatted_address;
            }
            map.fitBounds(bounds);
            map.setZoom(Math.min(map.getZoom(), 15));
        });

        google.maps.event.addListener(map, 'bounds_changed', function () {
            var bounds = map.getBounds();
            searchBox.setBounds(bounds);
        });

    </script>